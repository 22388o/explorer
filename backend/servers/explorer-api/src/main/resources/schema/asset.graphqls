"Taproot asset"
type Asset {
    "The Taproot ID that uniquely identifies the asset"
    assetId: ID!
    "The asset creator"
    creator: User!
    "The version of the Taproot asset"
    version: Int!
    "The first outpoint of the transaction that created the asset (txid:vout)"
    genesisPoint: BitcoinTransactionOutput!
    "The name of the asset"
    name: String!
    "The hash of the metadata for this genesis asset"
    metaDataHash: String!
    "The index of the output that carries the unique Taproot commitment in the genesis transaction"
    outputIndex: Int!
    "The version of the Taproot commitment that created this asset"
    genesisVersion: Int!
    "The type of the asset: normal or a collectible"
    type : AssetType!
    "The total amount of the asset stored in this Taproot UTXO"
    amount: BigInteger!
    "An optional lock time, as with Bitcoin transactions"
    lockTime: Int!
    "An optional relative lock time, as with Bitcoin transactions"
    relativeLockTime: Int!
    "The version of the script, only version 0 is defined at present"
    scriptVersion: Int!
    "The script key of the asset, which can be spent under Taproot semantics"
    scriptKey: String!
    "The raw group key which is a normal public key"
    rawGroupKey: String
    "The tweaked group key, which is derived based on the genesis point and also asset type"
    tweakedGroupKey: String
    "A signature over the genesis point using the above key"
    assetIdSig: String
    "The transaction that anchors the Taproot commitment where the asset resides"
    anchorTx: String!
    "The txid of the anchor transaction"
    anchorTxId: String!
    "The block hash the contains the anchor transaction above"
    anchorBlockHash: String!
    "Outpoint (txid:vout) that stores the Taproot commitment"
    anchorOutpoint: String!
    "The raw internal key that was used to create the anchor Taproot output key"
    internalKey: String!
    "The Taproot merkle root hash of the anchor output the asset was committed to"
    merkleRoot: String
    "The serialized preimage of a Tapscript sibling, if there was one"
    tapscriptSibling: String
}

"Taproot asset page - Container used to return search asset results"
type AssetPage {
    "Assets returned for a specific page number"
    content: [Asset]
    "Total number of elements returned for the search"
    totalElements: Int!
    "Total number of pages returned for the search"
    totalPages: Int!
}

"Asset type"
enum AssetType {
    "Indicates that an asset is capable of being split/merged, with each of the units being fungible, even across a key asset ID boundary (assuming the key group is the same)"
    NORMAL
    "Indicates that an asset is a collectible, meaning that each of the other items under the same key group are not fully fungible with each other. Collectibles also cannot be split or merged."
    COLLECTIBLE
}