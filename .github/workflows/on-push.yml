name: Push on develop - Build, test, create docker images & push them to docker hub

on:
  push:

jobs:

  # ====================================================================================================================
  # Build and run tests.
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v3

      # ================================================================================================================
      - name: Java Setup
        uses: actions/setup-java@v3.10.0
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # ================================================================================================================
      - name: build and run java tests
        run: |
          mvn clean install -P release -Dmaven.test.skip 
          mvn clean test
          mvn clean test -P integration

  # ====================================================================================================================
  # Integration tests with Docker.
  integration_tests:
    runs-on: ubuntu-latest
    needs: [ build_and_test ]
    steps:
      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v3

      # ================================================================================================================
      - name: Java Setup
        uses: actions/setup-java@v3.10.0
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # ================================================================================================================
      - name: Build docker images
        run: |
          mvn clean install -P release -Dmaven.test.skip -f backend/explorer-core/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-batch/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-api/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-web/pom.xml

      # ================================================================================================================
      - name: Run the docker-compose with our images
        run: |
          docker-compose up >> docker.logs 2>&1 &
          sleep 60

      # ================================================================================================================
      # Checking request life cycle.
      - name: Adding a request
        id: addProofRequest
        run: |
          requestId=$(curl -H "Content-Type: application/json" \
                -d '{ "query": "mutation { createAddProofRequest(input: {rawProof: \"0000000001fd03d40024750e110bb206b6de993ff90cfe9936b112e42b9f5c0afe2db929c07df18572b90000000101500000002080b8233c36f756820bca031a1af25171256708b74db796fc090000000000000051ccbb70dd4f539ee43aa2497b2e574fe933cd6f8e99bdeefc7a14fb903de073c77bff63ffff001db224071402ea02000000000101750e110bb206b6de993ff90cfe9936b112e42b9f5c0afe2db929c07df18572b90100000000ffffffff02e80300000000000022512074381d0361b8bb274bbec7ae6ef19578e2c9c6b789d9f6a390920bbb6a816bc9890700000000000016001443e6aa57dd19692fdb4ed0d2fe4395f9073ac9d00247304402200312366d908deb99e44849b1ad34ad2066436a657475ff4a304dc9d6c494635b0220544a9154e234f0deb5456775b5b5e253e93edb359703705ead13434147d91abf012102b959655e63ecfe92589f45672305ab3b9842fabb893679cb49677b40965ac20c0000000003e2072ad5e87840f0f77f575d97a52ea6ac07304878255c1cd7bd43ad800cb136aa45cc4fb6dd4cc8ca29cd961f77f55996c56c3b9b7bcae769c8b9d31fb5ae0e0cd0371ab880257eebe8e1d1ea875c5a4e836c8cf080f30a446ced8c74dae02bce211172847e5bdeba4c82491400fe18532579f4a10322e10232bc391a914e3ad7485857253f4a648a88ab5cae518c73a763e13580405f3077dd1e2b665eb6002f33e78b44907726edcf4c8ab9c658598b24910a70a2fd65a9c92638898d84a3b49e3d5a6c6da1cc2df751b03f72190aeac38fc855462e2dfa897ac00d57083bdf044b04e9000100014a750e110bb206b6de993ff90cfe9936b112e42b9f5c0afe2db929c07df18572b90000000111756e6b6e6f776e526f796c6c6f436f696e0e5573656420627920526f796c6c6f00000000000201000303fd03ea066901670065000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008020000092102bd5b831d6980ce7a1c342953d97fe73f7d150667b05e39d0466ba66efda380dc059f000400000000012103153c70ab08b260e17ad3d52d517544d4168041257dba377ca1b4cfc3a2de7e850274004900010001209eaee900fc3948eda143238f220372a61b535c6b1b984b6b26acd4c014537c1502220000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff012700010001220000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c221f59e840166a09cd365da351d907b18febc8f71fa2656b7bb60da8c00bbd\"}) { requestId }}" }' \
                http://localhost:9090/graphql | jq -r '.data.createAddProofRequest.requestId')
          echo "requestId=${requestId}"
          echo "requestId=${requestId}" >> $GITHUB_OUTPUT

      - name: Retrieving request status
        id: requestByRequestId
        run: |
          sleep 60
          status=$(curl -H "Content-Type: application/json" \
              -d '{ "query": "{ requestByRequestId(requestId: \"${{ steps.addProofRequest.outputs.requestId }}\") { status }}" }' \
              http://localhost:9090/graphql | jq -r '.data.requestByRequestId.status')
          echo "status=${status}" >> $GITHUB_OUTPUT

      - name: Check if the request has been treated
        if: ${{ steps.requestByRequestId.outputs.status != 'SUCCESS' }}
        run: |
          echo "Error - request status is ${{ steps.requestByRequestId.outputs.status }}"
          cat docker.logs
          exit 1

      - name: Retrieving the asset created by the request
        id: assetByAssetId
        run: |
          genesisBootstrapInformation=$(curl -H "Content-Type: application/json" \
              -d '{ "query": "{ assetByAssetId(assetId: \"9eaee900fc3948eda143238f220372a61b535c6b1b984b6b26acd4c014537c15\") { genesisBootstrapInformation }}" }' \
              http://localhost:9090/graphql | jq -r '.data.assetByAssetId.genesisBootstrapInformation'
          echo "genesisBootstrapInformation=${genesisBootstrapInformation}" >> $GITHUB_OUTPUT

      - name: Check if the asset has been treated
        if: ${{ steps.assetByAssetId.outputs.genesisBootstrapInformation != '750e110bb206b6de993ff90cfe9936b112e42b9f5c0afe2db929c07df18572b90000000111756e6b6e6f776e526f796c6c6f436f696e0e5573656420627920526f796c6c6f0000000000' }}
        run: |
          echo "Error - Asset not found ${{ steps.requestByRequestId.outputs.genesisBootstrapInformation }}"
          cat docker.logs
          exit 1

  # ====================================================================================================================
  # Docker images publication.
  docker_push:
    runs-on: ubuntu-latest
    needs: [ integration_tests ]
    if: github.ref == 'refs/heads/development'
    steps:
      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v3

      # ================================================================================================================
      - name: Java Setup
        uses: actions/setup-java@v3.10.0
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # ================================================================================================================
      - name: Get release number
        id: release
        run: echo "version=$(mvn help:evaluate -D expression=project.version -q -D forceStdout)" >> $GITHUB_OUTPUT

      # ================================================================================================================
      - name: Build docker images
        run: |
          mvn clean install -P release -Dmaven.test.skip -f backend/explorer-core/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-batch/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-api/pom.xml
          mvn spring-boot:build-image -P release -Dmaven.test.skip -f backend/servers/explorer-web/pom.xml

      # ================================================================================================================
      - name: Docker Hub login
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.EXPLORER_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.EXPLORER_DOCKER_HUB_PASSWORD }}

      # ================================================================================================================
      - name: Tag and push the docker images to Docker hub
        run: |
          docker tag royllo/explorer-batch:latest royllo/explorer-batch:${{ steps.release.outputs.version }}
          docker tag royllo/explorer-api:latest royllo/explorer-api:${{ steps.release.outputs.version }}
          docker tag royllo/explorer-web:latest royllo/explorer-web:${{ steps.release.outputs.version }}
          docker push royllo/explorer-batch:latest
          docker push royllo/explorer-batch:${{ steps.release.outputs.version }}
          docker push royllo/explorer-api:latest
          docker push royllo/explorer-api:${{ steps.release.outputs.version }}
          docker push royllo/explorer-web:latest
          docker push royllo/explorer-web:${{ steps.release.outputs.version }}
